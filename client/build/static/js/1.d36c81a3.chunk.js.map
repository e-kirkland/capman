{"version":3,"sources":["views/widgets/WidgetsTeam.js","views/charts/ChartLineSimple.js","views/charts/ChartBarSimple.js"],"names":["WidgetsBrand","props","withCharts","console","log","cap","salaryCap","teamCap","teamCount","rosterMax","useEffect","alignHorizontal","sm","lg","color","leftHeader","leftFooter","rightHeader","rightFooter","name","height","className","backgroundColor","dataPoints","label","labels","ChartLineSimple","borderColor","pointHoverBackgroundColor","pointed","attributes","pointHoverColor","defaultDatasets","data","getColor","pointBackgroundColor","pointedOptions","scales","xAxes","offset","gridLines","zeroLineColor","ticks","fontSize","fontColor","yAxes","display","min","Math","apply","max","elements","line","borderWidth","point","radius","hitRadius","hoverRadius","straightOptions","defaultOptions","options","Object","assign","maintainAspectRatio","legend","computedDatasets","deepObjectsMerge","datasets","computedOptions","defaultProps","ChartBarSimple","barPercentage","categoryPercentage"],"mappings":"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","file":"static/js/1.d36c81a3.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { CWidgetBrand, CRow, CCol } from '@coreui/react';\nimport CIcon from '@coreui/icons-react';\nimport ChartLineSimple from '../charts/ChartLineSimple';\nimport ChartBarSimple from '../charts/ChartBarSimple'\n\n\nconst WidgetsBrand = (props, {withCharts})=>{\n\n  // render\n\n  console.log(\"PROPS: \", props)\n\n  let cap = function () {\n    return `$${props.salaryCap}`\n  }\n  let teamCap = function () {\n    return `$${props.teamCap}`\n  }\n  let teamCount = function () {\n    return `${props.teamCount}`\n  }\n  let rosterMax = function () {\n    return `${props.rosterMax}`\n  }\n\n  useEffect(() => {\n    cap();\n    teamCap();\n    teamCount();\n    rosterMax();\n  }, [props])\n\n  let test = function () {\n    return \"TESTING\"\n  }\n\n  return withCharts ?\n  <CRow alignHorizontal='center'>\n    <CCol sm=\"6\" lg=\"3\">\n      <CWidgetBrand\n        color=\"facebook\"\n        leftHeader={cap()}\n        leftFooter=\"League Cap\"\n        rightHeader={teamCap()}\n        rightFooter=\"Team Salary\"\n      >\n        <CIcon\n          name=\"cil-dollar\"\n          height=\"52\"\n          className=\"my-4\"\n        />\n        <ChartLineSimple\n          className=\"position-absolute w-100 h-100\"\n          backgroundColor=\"rgba(255,255,255,.1)\"\n          dataPoints={[65, 59, 84, 84, 51, 55, 40]}\n          label=\"\"\n          labels=\"\"\n        />\n      </CWidgetBrand>\n    </CCol>\n\n    <CCol sm=\"6\" lg=\"3\">\n      <CWidgetBrand\n        color=\"twitter\"\n        rightHeader={teamCount()}\n        rightFooter=\"Total Players\"\n        leftHeader={rosterMax()}\n        leftFooter=\"League Max\"\n      >\n        <CIcon\n          name=\"cil-people\"\n          height=\"52\"\n          className=\"my-4\"\n        />\n        <ChartBarSimple\n          className=\"position-absolute w-100 h-100\"\n          backgroundColor=\"rgba(255,255,255,.1)\"\n          dataPoints={[1, 13, 9, 17, 34, 41, 38]}\n          label=\"\"\n          labels=\"\"\n        />\n      </CWidgetBrand>\n    </CCol>\n  </CRow> :\n  \n  <CRow alignHorizontal='center'>\n    <CCol sm=\"6\" lg=\"3\">\n      <CWidgetBrand\n        color=\"facebook\"\n        leftHeader={cap()}\n        leftFooter=\"League Cap\"\n        rightHeader={teamCap()}\n        rightFooter=\"Team Salary\"\n      >\n        <CIcon\n          name=\"cil-dollar\"\n          height=\"52\"\n          className=\"my-4\"\n        />\n        <ChartLineSimple\n          className=\"position-absolute w-100 h-100\"\n          backgroundColor=\"rgba(255,255,255,.1)\"\n          dataPoints={[65, 59, 84, 84, 51, 55, 40]}\n          label=\"\"\n          labels=\"\"\n        />\n      </CWidgetBrand>\n    </CCol>\n\n    <CCol sm=\"6\" lg=\"3\">\n      <CWidgetBrand\n        color=\"twitter\"\n        rightHeader={teamCount()}\n        rightFooter=\"Total Players\"\n        leftHeader={rosterMax()}\n        leftFooter=\"League Max\"\n      >\n        <CIcon\n          name=\"cil-people\"\n          height=\"52\"\n          className=\"my-4\"\n        />\n        <ChartBarSimple\n          className=\"position-absolute w-100 h-100\"\n          backgroundColor=\"rgba(255,255,255,.1)\"\n          dataPoints={[1, 13, 9, 17, 34, 41, 38]}\n          label=\"\"\n          labels=\"\"\n        />\n      </CWidgetBrand>\n    </CCol>\n  </CRow>\n}\n\nWidgetsBrand.propTypes = {\n  withCharts: PropTypes.bool\n}\n\nexport default WidgetsBrand\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { getColor, deepObjectsMerge } from '@coreui/utils'\nimport { CChartLine } from '@coreui/react-chartjs'\n\nconst ChartLineSimple = props => {\n\n  const {\n    borderColor,\n    backgroundColor,\n    pointHoverBackgroundColor,\n    dataPoints,\n    label,\n    pointed,\n    ...attributes\n  } = props\n\n  const pointHoverColor = (()=>{\n    if (pointHoverBackgroundColor) {\n      return pointHoverBackgroundColor\n    } else if (backgroundColor !== 'transparent') {\n      return backgroundColor\n    }\n    return borderColor\n  })()\n\n  const defaultDatasets = (()=>{\n    return [\n      {\n        data: dataPoints,\n        borderColor: getColor(borderColor),\n        backgroundColor: getColor(backgroundColor),\n        pointBackgroundColor: getColor(pointHoverColor),\n        pointHoverBackgroundColor: getColor(pointHoverColor),\n        label\n      }\n    ]\n  })()\n\n  const pointedOptions = (()=>{\n    return {\n      scales: {\n        xAxes: [\n          {\n            offset: true,\n            gridLines: {\n              color: 'transparent',\n              zeroLineColor: 'transparent'\n            },\n            ticks: {\n              fontSize: 2,\n              fontColor: 'transparent'\n            }\n          }\n        ],\n        yAxes: [\n          {\n            display: false,\n            ticks: {\n              display: false,\n              min: Math.min.apply(Math, dataPoints) - 5,\n              max: Math.max.apply(Math, dataPoints) + 5\n            }\n          }\n        ]\n      },\n      elements: {\n        line: {\n          borderWidth: 1\n        },\n        point: {\n          radius: 4,\n          hitRadius: 10,\n          hoverRadius: 4\n        }\n      }\n    }\n  })()\n\n  const straightOptions = (()=>{\n    return {\n      scales: {\n        xAxes: [{\n          display: false\n        }],\n        yAxes: [{\n          display: false\n        }]\n      },\n      elements: {\n        line: {\n          borderWidth: 2\n        },\n        point: {\n          radius: 0,\n          hitRadius: 10,\n          hoverRadius: 4\n        }\n      }\n    }\n  })()\n\n  const defaultOptions = (()=>{\n    const options = pointed ? pointedOptions : straightOptions\n      return Object.assign({}, options, {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        }\n      })\n  })()\n\n  const computedDatasets = (() => {\n    return deepObjectsMerge(defaultDatasets, attributes.datasets || {})\n  })()\n\n  const computedOptions = (() => {\n    return deepObjectsMerge(defaultOptions, attributes.options || {})\n  })()\n\n  // render\n\n  return (\n    <CChartLine\n      {...attributes}\n      datasets={computedDatasets}\n      options={computedOptions}\n      labels={label}\n    />\n  )\n}\n\nChartLineSimple.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  //\n  borderColor: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  pointHoverBackgroundColor: PropTypes.string,\n  dataPoints: PropTypes.array,\n  label: PropTypes.string,\n  pointed: PropTypes.bool\n};\n\nChartLineSimple.defaultProps = {\n  borderColor: 'rgba(255,255,255,.55)',\n  backgroundColor: 'transparent',\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\n  label: 'Sales'\n};\n\nexport default ChartLineSimple\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { getColor } from '@coreui/utils'\nimport { CChartBar } from '@coreui/react-chartjs'\n\nconst ChartBarSimple = props => {\n\n  const {\n    backgroundColor,\n    pointHoverBackgroundColor,\n    dataPoints,\n    label,\n    pointed,\n    ...attributes\n  } = props\n\n  const defaultDatasets = (()=>{\n    return [\n      {\n        data: dataPoints,\n        backgroundColor: getColor(backgroundColor),\n        pointHoverBackgroundColor: getColor(pointHoverBackgroundColor),\n        label: label,\n        barPercentage: 0.5,\n        categoryPercentage: 1\n      }\n    ]\n  })()\n\n  const defaultOptions = (()=>{\n    return {\n      maintainAspectRatio: false,\n      legend: {\n        display: false\n      },\n      scales: {\n        xAxes: [{\n          display: false\n        }],\n        yAxes: [{\n          display: false\n        }]\n      }\n    }\n  })()\n\n  // render\n  return (\n    <CChartBar\n      {...attributes}\n      datasets={defaultDatasets}\n      options={defaultOptions}\n      labels={label}\n    />\n  )\n}\n\nChartBarSimple.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  //\n  backgroundColor: PropTypes.string,\n  pointHoverBackgroundColor: PropTypes.string,\n  dataPoints: PropTypes.array,\n  label: PropTypes.string,\n  pointed: PropTypes.bool\n};\n\nChartBarSimple.defaultProps = {\n  backgroundColor: 'rgba(0,0,0,.2)',\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\n  label: 'Sales'\n};\n\nexport default ChartBarSimple\n"],"sourceRoot":""}